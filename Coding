import pandas as pd
df = pd.read_csv('/content/ICICIBANK.csv')
df
df = df[['Date','Prev Close',	'Open',	'High',	'Low',	'Last','Close',	'VWAP']]
df.to_csv('modified_dataset.csv', index=False)
df
import pandas as pd
df['Date'] = pd.to_datetime(df['Date'])
df['Year'] = df['Date'].dt.year
df['Month'] = df['Date'].dt.month
df['Day'] = df['Date'].dt.day
df['Date'] = df['Date'].dt.strftime('%Y-%m-%d')
print(df)
df = df[['Year',  'Month',  'Day', 'Prev Close',    'Open'  ,  'High' ,   'Low',   'Last'  , 'Close',    'VWAP']]
df.to_csv('modified_dataset.csv', index=False)
df
X=df.iloc[:,0:4].values
y=df.iloc[:,4:10].values
print(X)
print(y)
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from sklearn.svm import SVR
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv1D, MaxPooling1D, Flatten, Dense, LSTM
df['Close'] = pd.to_numeric(df['Close'], errors='coerce')
df['Prev Close'] = pd.to_numeric(df['Prev Close'], errors='coerce')


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

linear_model = LinearRegression()
rf_model = RandomForestRegressor(random_state=42)
gb_model = GradientBoostingRegressor(random_state=42)
svr_model = SVR()
models = {'Linear Regression': linear_model, 'Random Forest': rf_model, 'Gradient Boosting': gb_model, 'SVR': svr_model}

for name, model in models.items():
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)

    mse = mean_squared_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred, squared=False)
    r2 = r2_score(y_test, y_pred)

    print(f'\n{name} Results:')
    print(f'Mean Squared Error: {mse}')
    print(f'Root Mean Squared Error (RMSE): {rmse}')
    print(f'R-squared: {r2}')

    plt.scatter(y_test, y_pred, label=name)
    plt.xlabel('Actual Close')
    plt.ylabel('Predicted Close')
    plt.legend()

cnn_model = Sequential()
cnn_model.add(Conv1D(filters=32, kernel_size=3, activation='relu', input_shape=(X_train.shape[1], 1)))
cnn_model.add(MaxPooling1D(pool_size=2))
cnn_model.add(Flatten())
cnn_model.add(Dense(50, activation='relu'))
cnn_model.add(Dense(1, activation='linear'))

X_train_cnn = X_train.values.reshape((X_train.shape[0], X_train.shape[1], 1))
X_test_cnn = X_test.values.reshape((X_test.shape[0], X_test.shape[1], 1))


cnn_model.compile(optimizer='adam', loss='mean_squared_error')
cnn_model.fit(X_train_cnn, y_train, epochs=10, batch_size=32, verbose=0)

y_pred_cnn = cnn_model.predict(X_test_cnn)
mse_cnn = mean_squared_error(y_test, y_pred_cnn)
rmse_cnn = mean_squared_error(y_test, y_pred_cnn, squared=False)  # Calculate RMSE
r2_cnn = r2_score(y_test, y_pred_cnn)

print('\nCNN Results:')
print(f'Mean Squared Error: {mse_cnn}')
print(f'Root Mean Squared Error (RMSE): {rmse_cnn}')
print(f'R-squared: {r2_cnn}')
lstm_model = Sequential()
lstm_model.add(LSTM(50, activation='relu', input_shape=(X_train.shape[1], 1)))
lstm_model.add(Dense(1, activation='linear'))

X_train_lstm = X_train.values.reshape((X_train.shape[0], X_train.shape[1], 1))
X_test_lstm = X_test.values.reshape((X_test.shape[0], X_test.shape[1], 1))

lstm_model.compile(optimizer='adam', loss='mean_squared_error')
lstm_model.fit(X_train_lstm, y_train, epochs=10, batch_size=32, verbose=0)

y_pred_lstm = lstm_model.predict(X_test_lstm)
mse_lstm = mean_squared_error(y_test, y_pred_lstm)
rmse_lstm = mean_squared_error(y_test, y_pred_lstm, squared=False)
r2_lstm = r2_score(y_test, y_pred_lstm)

print('\nLSTM Results:')
print(f'Mean Squared Error: {mse_lstm}')
print(f'Root Mean Squared Error (RMSE): {rmse_lstm}')
print(f'R-squared: {r2_lstm}')

plt.scatter(y_test, y_pred_lstm, label='LSTM')
plt.xlabel('Actual Close')
plt.ylabel('Predicted Close')
plt.legend()
plt.show()
new_data = [[2001,12,23,567.98]]
predicted_values = {column: linear_models[column].predict(pd.DataFrame(new_data, columns=['Year', 'Month', 'Day', 'Prev Close'])) for column in target_columns}
for column in target_columns:
    print(f'Predicted {column}: {predicted_values[column][0]}')
